ASP.NET Core uygulamsını dockerize yapamk -2
	dockerfile dosyasının oluşturulması

	Dockerize image oluşturma 
	docker build -t udemyaspcoremvc:v1 .
	diyoruz.

	Dockerize container oluşturma
	run komutunu kullanacağız daha işlevsel olduğu için
	docker run -p 5000:80 udemyaspcoremvc:v1
	containerı ayağa kaldırmak için p parametresini eklememiz
	gerekiyor.5000 portu benim işletim sistemimin portu 80 ise ayağa kalakacak
	container içerisinde çalışanın uygulamamnın portu
	bunu dedikten sonra chrome gel url ye localhost:5000 de projeyi göreceksin
	bir container daha ayağa kaldıralım
	docker run -d -p 5001:80 udemyaspcoremvc:v1 yazıyoruz

	şimdi bir tane daha container oluşturalım ama bu sefer container 
	ad da verelim 
	docker -d --name myaspcontainer -p 5002:80 udemyaspcoremvc:v1
	diyoruz.
	Şimdi containerları silelim
	ilk önce durdurulsunuz 
	docker stop c1b artık localhostt 5000 portumu çalıştıramayacak
	docker ps -a dersem bütün containerları listeler
	docker rm c1b dediğimde containerrlarımı siliyor
	daha kısa yolu ise silmenin 
	docker ps diyelim ilk 
	docker rm f7b --force
	force parametresiyle çalışsa bile proje silebiliyoruz

	.NET CORE CLI NEDİR?
		Siz bilgisayarınıza sdk kurduğunuz zaman aspnet core sdk kurduğunuz zaman
		default olarak gelen bir komut satır arayüzüdür.Bu komut satır arayüzü
		biz arkadaşlar core uygulamaları oluşturabilir var olan uygulamaları 
		build işlemlerini gerçekleştirebilir publish işlemi gerçekleştirebilir,
		dotnet clı komutu bilmem neden önemli dockerfile içerisinde publish edilmiş dosyanın yolunu veriyorduk
		artık ben istiyorum ki publish edilme kısmını da ben dockerfile içerisinde 
		gerçekleştireyim bir komut aracılığıyla ilk başta base image alıyordum
		base image içinde komutlar çalıştırıyordum eğer ki ben runtime yerine sdk image
		alırsam sdk image içinde dotnet cli kurulu şekilde geliyor o zaamn ben COPY bin/Release/netcoreapp3.1/publish .
		burda DOTNET CLI komutları çalıştırabilirim yani powershell de yapmış olduklarımı
		dotnet run,dotnet restore ben direk ilgili imagelarda çalıştırabilirim bana ne artısı var elle publish
		etmek yerine publish edilen yeri vermek yerine publish edilme işlemi yapabilirim

		yani benim kodlama süremi ciddi bir şekilde uygulamalarımzı ciddi bir şekilde
		süresi azaltacaktır .Dockerfile üzerinden image oluşturabilmek için napmam 
		gerekiyor mutlaka publish etmem gerekiyor yani ben bununla uğraşmıyım ben direk Copy
		komutla gerçekleştireyim 

		ASP.NET CORE UYGULAMASINI DOCKERİZE YAPMAK
		(NET CORE CLI)-5

		FROM mcr.microsoft.com/dotnet/sdk:3.1
WORKDIR /app
COPY . .
RUN dotnet restore
RUN dotnet publish AspNetCoreMvc.csproj -c Release -o out
WORKDIR out
ENV ASPNETCORE_URLS="http://*:4500"//burda * olmasının sebebi canlı ya çıkıldığı 
zaman localhost ile çıkılmadığı için bu şekilde yapıldı
ENTRYPOINT ["dotnet","AspNetCoreMvc.dll"]
Bu şekilde dockerfile dosyamızı değiştiriyoruz.
powershell de images dosyasını görmek için
docker images diyoruz
image oluşturmak için 
docker build -t udemyaspcoremvc:v1 diyoruz 

docker image kontrol edelim oluşmuş mu
docker images diyoruz tekrar
containerımı oluşturmak için ise
docker run -p 5000:4500 --name mycon1 5d1
diyoruz 
sonra bir tane daha container oluşturup çalıştıralım 
docker run -p 5001:4500 --name mycon2 5d1
diyoruz
bütün container ları görmek için 
docker ps 
diyoruz
docker containerlari silebilmek için 
docker rm 122 bd1 --force 
diyoruz force silmeye zorla diyoruz
docker ps diyip bakıyoruz containerlarımız silinmiş
docker images dediğimizde udemyaspcoremvc image ı mız duruyor.







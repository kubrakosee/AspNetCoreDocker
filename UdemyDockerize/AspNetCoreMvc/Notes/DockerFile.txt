ASP.NET Core uygulamsını dockerize yapamk -2
	dockerfile dosyasının oluşturulması

	Dockerize image oluşturma 
	docker build -t udemyaspcoremvc:v1 .
	diyoruz.

	Dockerize container oluşturma
	run komutunu kullanacağız daha işlevsel olduğu için
	docker run -p 5000:80 udemyaspcoremvc:v1
	containerı ayağa kaldırmak için p parametresini eklememiz
	gerekiyor.5000 portu benim işletim sistemimin portu 80 ise ayağa kalakacak
	container içerisinde çalışanın uygulamamnın portu
	bunu dedikten sonra chrome gel url ye localhost:5000 de projeyi göreceksin
	bir container daha ayağa kaldıralım
	docker run -d -p 5001:80 udemyaspcoremvc:v1 yazıyoruz

	şimdi bir tane daha container oluşturalım ama bu sefer container 
	ad da verelim 
	docker -d --name myaspcontainer -p 5002:80 udemyaspcoremvc:v1
	diyoruz.
	Şimdi containerları silelim
	ilk önce durdurulsunuz 
	docker stop c1b artık localhostt 5000 portumu çalıştıramayacak
	docker ps -a dersem bütün containerları listeler
	docker rm c1b dediğimde containerrlarımı siliyor
	daha kısa yolu ise silmenin 
	docker ps diyelim ilk 
	docker rm f7b --force
	force parametresiyle çalışsa bile proje silebiliyoruz

	.NET CORE CLI NEDİR?
		Siz bilgisayarınıza sdk kurduğunuz zaman aspnet core sdk kurduğunuz zaman
		default olarak gelen bir komut satır arayüzüdür.Bu komut satır arayüzü
		biz arkadaşlar core uygulamaları oluşturabilir var olan uygulamaları 
		build işlemlerini gerçekleştirebilir publish işlemi gerçekleştirebilir,
		dotnet clı komutu bilmem neden önemli dockerfile içerisinde publish edilmiş dosyanın yolunu veriyorduk
		artık ben istiyorum ki publish edilme kısmını da ben dockerfile içerisinde 
		gerçekleştireyim bir komut aracılığıyla ilk başta base image alıyordum
		base image içinde komutlar çalıştırıyordum eğer ki ben runtime yerine sdk image
		alırsam sdk image içinde dotnet cli kurulu şekilde geliyor o zaamn ben COPY bin/Release/netcoreapp3.1/publish .
		burda DOTNET CLI komutları çalıştırabilirim yani powershell de yapmış olduklarımı
		dotnet run,dotnet restore ben direk ilgili imagelarda çalıştırabilirim bana ne artısı var elle publish
		etmek yerine publish edilen yeri vermek yerine publish edilme işlemi yapabilirim

		yani benim kodlama süremi ciddi bir şekilde uygulamalarımzı ciddi bir şekilde
		süresi azaltacaktır .Dockerfile üzerinden image oluşturabilmek için napmam 
		gerekiyor mutlaka publish etmem gerekiyor yani ben bununla uğraşmıyım ben direk Copy
		komutla gerçekleştireyim 

		ASP.NET CORE UYGULAMASINI DOCKERİZE YAPMAK
		(NET CORE CLI)-5

		FROM mcr.microsoft.com/dotnet/sdk:3.1
WORKDIR /app
COPY . .
RUN dotnet restore
RUN dotnet publish AspNetCoreMvc.csproj -c Release -o out
WORKDIR out
ENV ASPNETCORE_URLS="http://*:4500"//burda * olmasının sebebi canlı ya çıkıldığı 
zaman localhost ile çıkılmadığı için bu şekilde yapıldı
ENTRYPOINT ["dotnet","AspNetCoreMvc.dll"]
Bu şekilde dockerfile dosyamızı değiştiriyoruz.
powershell de images dosyasını görmek için
docker images diyoruz
image oluşturmak için 
docker build -t udemyaspcoremvc:v1 diyoruz 

docker image kontrol edelim oluşmuş mu
docker images diyoruz tekrar
containerımı oluşturmak için ise
docker run -p 5000:4500 --name mycon1 5d1
diyoruz 
sonra bir tane daha container oluşturup çalıştıralım 
docker run -p 5001:4500 --name mycon2 5d1
diyoruz
bütün container ları görmek için 
docker ps 
diyoruz
docker containerlari silebilmek için 
docker rm 122 bd1 --force 
diyoruz force silmeye zorla diyoruz
docker ps diyip bakıyoruz containerlarımız silinmiş
docker images dediğimizde udemyaspcoremvc image ı mız duruyor.

DOCKER MULTISTAGE BUİLD 
		multistage şu anlama geliyor dockerfile içerisinde
		uygulamanızı inşa ederken bir tane base image dan
		birden fazla base  imagedan faydalanıyorsanız bunun adına 
		multistage deniyor.Peki neden dockerfile içerisinde ben  2 tane
		base image kullanıyım.neden kullanmak zorunda olduğumuzu açıklayalım
		Bir önceki dersimizde yani (-5) yeni image mı sdk image mından yani base
		olarak sdk imagedan oluşturmuştuk şimdi dikkat ederseniz sdk sahip olan image'ım
		715 mb ken benim sdk image içermeyen aspnetcore uygulamamın çalıştıracak ortam
		olan yani sadece aspnetcore runtime içeren image'ın 212 mb yaklaşıkm 3.5 katı
		benim burda optimasyon yapmam lazım image mın boyutunu çok fazla büyüdü
		ve image ne kadar küçükse container ayağa kaldırmanız bir image ı bir yerden 
		bir yere taşımanız o kadar kolay olur.var olan image nın bıyutunu küçültmek için 
		multistage dediğimiz birden fazla image dan faydalanacağım peki nasıl
		faydanacağız hemen bakalım dockerfile dosyasına gel
		FROM mcr.microsoft.com/dotnet/sdk:3.1 buna ihtiyacım artık yok çünkü
		elimde publish edilmiş bir tane datam var.tek yapmam gereken publish edilmiş
		exe yi yani dll çalıştırmak o zaman ben 2.iamge dan yararlanıyım
		ENTRYPOINT ["dotnet","AspNetCoreMvc.dll"] sadece burdaki uygulamamı 
		çalıştıracak image'm olsun birden fazla image dan yararlanıyorsa buna multistage
		deniliyor

		FROM mcr.microsoft.com/dotnet/sdk:3.1 as build 
#benim publish edilmiş datam burda from da -as build'le takma isim veriyoruz
WORKDIR /app

COPY . .

RUN dotnet restore
RUN dotnet publish AspNetCoreMvc.csproj -c Release -o out


FROM  mcr.microsoft.com/dotnet/aspnet
WORKDIR /app
COPY --from build /app/out .
#copy de dediğim al benim build image ı al app klasörün içindeki out klasörün içindeki
#publish edilmiş data mı al diyorum
#WORKDIR out
#WORKDIR out olan çalışma dosyamı burda belli etmeme gerek yok o yüzden kaldırıyoruz
ENV ASPNETCORE_URLS="http://*:4500"
ENTRYPOINT ["dotnet","AspNetCoreMvc.dll"]

#//sdk 
		#app
			#out
				#publish data buraki publish edilmiş data yı benim yeni 
				#image ma taşımam lazım


FROM mcr.microsoft.com/dotnet/sdk:3.1 as build 
WORKDIR /app

COPY *.csproj .
RUN dotnet restore

COPY . .
#//cash de belletip kopyalayacak ordaki dosyaları kullanıcak
#eğer ben css dosyasına yeni bir css ekledim COPY *.csproj .
#RUN dotnet restore bunları cacheden okuyacak öteki copy yeniden oluşturucak
RUN dotnet restore
RUN dotnet publish AspNetCoreMvc.csproj -c Release -o out


FROM  mcr.microsoft.com/dotnet/aspnet
WORKDIR /app
COPY --from build /app/out .
ENV ASPNETCORE_URLS="http://*:4500"
ENTRYPOINT ["dotnet","AspNetCoreMvc.dll"]

sonra powershelle gel docker images
de
sonra 
docker build -t udemyaspcoremvc:v3 . diyoruz
ve oluşturduktan sonra image ın 
docker images diyip image ın boyutuna bakalım 212 mb 
olduğunu görüyoruz.
NOT:sdk komutu sadece dotnet clı için çalıştırmak için kullanın
PUBLİSH DİR ,RUNDIR veya farklı bir dotnet cli komutudur
bu komutlarla işiniz bittiği zaman uygulamaınızın publish edilmiş
datasını aldıktan sonra sıfır bir image üzerinden
kodlamanıza devam edin bu saye de imageların boyutunu ciddi 
şekilde küçültmüş olucaksınız.

DOCKERIGNORE DOSYASI OLUŞTURMAK
	dockerignore dosyası ne işe yarıyor biz dockerfile
	içerisinde kopyalama komutları yazdığımız zaman
	yani bizim projemizde image içerisinde klasöre kopyalama
	işlemi gerçekleştiğinde dockera biz şunu söylebiliyoruz.
	şu klasör ve şu dosyaları kesinlikle image içerisine
	kopyalama diyebiliyoruz işte bunu diyebilmemiz için projemizin
	root içerine dockerignore dosyası oluşturma bin ve obj nin taşınmasına kopyalanmasına
	gerek yok.Open file diyip dockerfile nerdeyse onun tarafa
	.dockerignore diye txt açıyoruz alttaki kodları yazıyoruz.

	**/bin/
//çift yıldız benim tüm klasörlerimi ara bunun içerisinde bin klasörü varsa
bu klasörü kopyalama
**/obj/
**/Dockerfile*
**/.dockerignore*
//burdaki arakadaşlar taşınmasın

Dockerfile daki 
COPY . . buraki kopyalama işleminde dockerignore dışında kalan dosyaları kopyalayacak

DOCKER VOLUME 
	ASP.NET CORE MVC PROJESİ-IMAGESAVE SAYFASI EKLEME
	Kullanıcıdan almış olduğumuz resimleri kaydediceğiz
	şimdi HomeController kısmına gel
    //resim kaydediyorsan enctype="multipart/form-data"  bunun olması gerekir

	DOCKER VOLUME
	 ASP.NET CORE MVC PROJESİ-IMAGESHOW SAYFASI EKLEME
		Kaydedilen resimleri göstericek basit bir sayfa düzenleyecğiz
		Bu sayfayı da özellikle containerları ayağa kaldırdığımızda
		bir containera ekelmiş olduğumuz resim diğer containerda görünüyormu
		bunları daha rahat simüle edebilmek için böyle bir sayfa hazırlayacağız
		startup.cs nin içine gelip bir tane servis yazacağız.Configureservices metodun 
		içinde yapıcaz

		@model IEnumerable<string>//burda HomeControllerda dönen verimiz ne string onu alalım
		Ienumerable bu işe yarıyor
		bir dizin geldiği için foreach ile dönmemiz lazım


		DOCKER VOLUME
	 ASP.NET CORE MVC PROJESİ-CONTAİNER SAYFASI EKLEME
	 docker images
	  docker build -t udemyaspcoremvc:v1 .
	  container çalıştırma
	  docker run -p 5000:4500 --name mycon1 9s5 yapıyoruz

	  docker ps containerları listeleme
	  containerları silme 
	  docker rm 02e --force diyoruz
	  sonra 
	  docker build --no-cache -t udemyaspcoremvc:v6 .
	  docker run -d -p 5001:4500 --name mycon2 870





